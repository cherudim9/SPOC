//out(port, val)  { asm(LL,8); asm(LBL,16); asm(BOUT); }
00000000  0000080e  LL    0x8 (D 8)		//ra = port
00000004  00001026  LBL   0x10 (D 16)	//rb = val
00000008  0000009a  BOUT

//ivec(void *isr) { asm(LL,8); asm(IVEC); }
0000000c  00000002  LEV   0x0 (D 0)		//
00000010  0000080e  LL    0x8 (D 8)		//a = *isr
00000014  000000a4  ivec                //ivec = a

//stmr(int val)   { asm(LL,8); asm(TIME); }
00000018  00000002  LEV   0x0 (D 0)		//
0000001c  0000080e  LL    0x8 (D 8)		//a = val
00000020  000000a7  TIME				//set timeout = a (= val)

//halt(val)       { asm(LL,8); asm(HALT); }
00000024  00000002  LEV   0x0 (D 0)		//
00000028  0000080e  LL    0x8 (D 8)		//a = val
0000002c  00000000  halt                //halt

//alltraps()
00000034  0000009d  PSHA				// sp -= 8, *sp = a
00000038  000000a0  PSHB				// sp -= 8, *sp = b
0000003c  00000015  LG    0x0 (D 0)		// a = content(pc+0) (a = current)
00000040  ffffff57  SUBI  0xffffffff (D -1)	//a += 1 
00000044  00000045  SG    0x0 (D 0) 		//*(pc+0) = a (current = a)
00000048  000000a1  POPB					//a = *sp, sp += 8
0000004c  000000a3  POPA					//b = *sp, sp += 8
00000050  00000098  RTI 					//return from interrupt

//main()
00000054  00000002  LEV   0x0 (D 0)
current = 0;
00000058  00000023  LI    0x0 (D 0)			//a = 0
0000005c  00000045  SG    0x0 (D 0)			// *(pc+0)= a (current = 0)

//stmr(1000);
00000060  0003e89e  PSHI  0x3e8 (D 1000)			//sp -= 8, *sp = 1000
00000064  ffffb405  JSR   0xffffffb4 (TO 0x1c)		// save current pc, *sp = pc , sp -= 8 ,jump to stmr(1000)(0x1c)
00000068  00000801  ENT   0x8 (D 8)					// sp = sp + 8

//ivec(alltraps);
0000006c  ffffc408  LEAG  0xffffffc4 (D -60)		//a = pc - 60
00000070  0000009d  PSHA							//sp -= 8 ,*sp = a (= pc-60)
00000074  ffff9805  JSR   0xffffff98 (TO 0x10)		//save current pc *sp = pc. sp -= 8,jump to ivec(0x10)
00000078  00000801  ENT   0x8 (D 8)					//sp += 8
0000007c  00000097  STI 							//iena = 1 -- set interrupt flag
 
//while (current < 10) {
00000080  00000003  JMP   <fwd>
//if (current & 1) out(1, '1'); else out(1, '0');
00000084  00000015  LG    0x0 (D 0)					//a = *(pc+0) (a = current)
00000088  00000169  ANDI  0x1 (D 1)					//a &= 1      (a = current & 1)
0000008c  00000084  BZ    <fwd>						//if a = 0 branch to (out 1 or out 0)
00000090  0000319e  PSHI  0x31 (D 49)				//sp -= 8 , *sp = 49(print 1)
00000094  0000019e  PSHI  0x1 (D 1)					//sp -= 8 . *sp = 1	
00000098  ffff6405  JSR   0xffffff64 (TO 0x0)		//*sp = pc , sp = sp-8. jump tp out(port = 1, val = 1) (0x0)
0000009c  00001001  ENT   0x10 (D 16)				//sp += 8
000000a0  00000003  JMP   <fwd>						//jump back to do the loop 
000000a4  0000309e  PSHI  0x30 (D 48)				//sp -=8 ,*sp = 48(print 0)
000000a8  0000019e  PSHI  0x1 (D 1)					//sp -=8. *sp = 1
000000ac  ffff5005  JSR   0xffffff50 (TO 0x0)		//*sp = pc, sp -= 8, jump to out(port = 1, val = 0)(0x0)
000000b0  00001001  ENT   0x10 (D 16)				//sp += 8


//halt(0);
000000b4  00000015  LG    0x0 (D 0)					//a = *(pc+0) = current		
000000b8  00000a3b  LBI   0xa (D 10)				//b = 10
000000bc  0000008c  BLT   <fwd>						//if current < 10 branch to while loop
000000c0  0000009e  PSHI  0x0 (D 0)					//sp -= 8, *sp = 0
000000c4  ffff6005  JSR   0xffffff60 (TO 0x28)		// *sp = pc , sp -= 8, jump to halt(val = 0)(0x28) 
000000c8  00000801  ENT   0x8 (D 8)					// sp += 8
000000cc  00000002  LEV   0x0 (D 0)
